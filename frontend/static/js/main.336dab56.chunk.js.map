{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","selectedFile","setSelectedFile","outPutFileUrl","setOutPutFileUrl","loading","setLoading","fileInput","useRef","Container","Card","className","Header","Body","Text","ref","type","onChange","event","target","files","style","display","Button","variant","onClick","current","click","formData","FormData","append","axios","method","url","data","then","response","listId","alert","Row","Col","md","Image","fluid","src","URL","createObjectURL","Spinner","animation","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAYe,SAASA,IAAQ,IAAD,EACWC,mBAAsB,MADjC,mBACtBC,EADsB,KACRC,EADQ,OAEaF,mBAAwB,MAFrC,mBAEtBG,EAFsB,KAEPC,EAFO,OAGCJ,oBAAkB,GAHnB,mBAGtBK,EAHsB,KAGbC,EAHa,KAUvBC,EAAYC,iBAAyB,MA6B3C,OACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAMC,UAAU,OAAhB,UACE,cAACD,EAAA,EAAKE,OAAN,8BACA,eAACF,EAAA,EAAKG,KAAN,WACE,cAACH,EAAA,EAAKI,KAAN,UACE,uBACEC,IAAKR,EACLS,KAAK,OACLC,SA3CW,SAACC,GACtBhB,EAAgBgB,EAAMC,OAAOC,MAAM,IACnChB,EAAiB,OA0CPiB,MAAO,CAAEC,QAAS,YAGtB,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kCAAMlB,EAAUmB,eAAhB,aAAM,EAAmBC,SAA5D,yBAGA,cAACJ,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QA3ClB,WACdnB,GAAW,GACX,IAAMsB,EAAW,IAAIC,SAEhB5B,GAKL2B,EAASE,OAAO,OAAQ7B,GAExB8B,IAAM,CACJC,OAAQ,OACRC,IAAK,8CACLC,KAAMN,IACLO,MAAK,SAACC,GACPL,IAAM,CACJC,OAAQ,OACRC,IAAK,gDACLC,KAAME,EAASF,KAAKG,SACnBF,MAAK,SAACC,GACPhC,EAAiBgC,EAASF,MAC1B5B,GAAW,UAjBbgC,MAAM,gBAsC0C3B,UAAU,OAAtD,iCAIA,eAAC4B,EAAA,EAAD,CAAK5B,UAAU,OAAf,UACE,cAAC6B,EAAA,EAAD,CAAKC,GAAI,EAAT,SACGxC,GACC,cAACyC,EAAA,EAAD,CAAOC,OAAK,EAACC,IAAKC,IAAIC,gBAAgB7C,IAAiB,OAG3D,eAACuC,EAAA,EAAD,CAAKC,GAAI,EAAG9B,UAAU,2BAAtB,UACGR,GACC,cAACuC,EAAA,EAAD,CACEC,OAAK,EACLC,IACE,gDACEzC,IAAiB,IAIxBE,GAAW,cAAC0C,EAAA,EAAD,CAASC,UAAU,yBCrF7C,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC5D,EAAD,MAEF6D,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.336dab56.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport React, { useRef, useState } from 'react'\r\nimport {\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Container,\r\n  Image,\r\n  Row,\r\n  Spinner\r\n} from 'react-bootstrap'\r\n\r\nexport default function App () {\r\n  const [selectedFile, setSelectedFile] = useState<null | File>(null)\r\n  const [outPutFileUrl, setOutPutFileUrl] = useState<null | string>(null)\r\n  const [loading, setLoading] = useState<boolean>(false)\r\n\r\n  const handleFilePick = (event: any) => {\r\n    setSelectedFile(event.target.files[0])\r\n    setOutPutFileUrl(null)\r\n  }\r\n\r\n  const fileInput = useRef<HTMLInputElement>(null)\r\n\r\n  const analyze = () => {\r\n    setLoading(true)\r\n    const formData = new FormData()\r\n\r\n    if (!selectedFile) {\r\n      alert('select file')\r\n      return\r\n    }\r\n\r\n    formData.append('File', selectedFile)\r\n\r\n    axios({\r\n      method: 'post',\r\n      url: 'https://localhost:6001/api/File/upload-file',\r\n      data: formData\r\n    }).then((response) => {\r\n      axios({\r\n        method: 'post',\r\n        url: 'https://localhost:7001/FacialLandmark/analyze',\r\n        data: response.data.listId\r\n      }).then((response) => {\r\n        setOutPutFileUrl(response.data)\r\n        setLoading(false)\r\n      })\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Card className=\"mt-2\">\r\n        <Card.Header>Facial Landmark</Card.Header>\r\n        <Card.Body>\r\n          <Card.Text>\r\n            <input\r\n              ref={fileInput}\r\n              type=\"file\"\r\n              onChange={handleFilePick}\r\n              style={{ display: 'none' }}\r\n            />\r\n          </Card.Text>\r\n          <Button variant=\"primary\" onClick={() => fileInput.current?.click()}>\r\n            Upload File\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={analyze} className=\"ml-2\">\r\n            Get Facial Landmark\r\n          </Button>\r\n\r\n          <Row className=\"mt-5\">\r\n            <Col md={6}>\r\n              {selectedFile && (\r\n                <Image fluid src={URL.createObjectURL(selectedFile) || ''} />\r\n              )}\r\n            </Col>\r\n            <Col md={6} className=\"text-center align-middle\">\r\n              {outPutFileUrl && (\r\n                <Image\r\n                  fluid\r\n                  src={\r\n                    'https://localhost:7001/FacialLandmark/output/' +\r\n                      outPutFileUrl || ''\r\n                  }\r\n                />\r\n              )}\r\n              {loading && <Spinner animation=\"border\" />}\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Container>\r\n  )\r\n}\r\n","import { ReportHandler } from 'web-vitals'\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}